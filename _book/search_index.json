[
["index.html", "Webinar R udvidet 1 Introduktion 1.1 Workflow", " Webinar R udvidet Tue Hellstern 2020-05-27 1 Introduktion Dette webinar er for dig der gerne vil lidt videre med R. 1.1 Workflow Jeg har valgt at bassere dette webinar på et typisk workflow med brug af de forskellige funktioner i Tidyvers pakken. Tidyvers pakke er valgt da den indholder alle de funktioner som du skal bruge for at komme igang med at lave dataanalyse i R. Det er en nogle meget effektive funktioner pakken indeholder. Dette workflow tager dig fra importen af dine data til en interaktiv præsentationen af dine data. "],
["hvad-er-r.html", "2 Hvad er R", " 2 Hvad er R R er et open-source programmeringssprog der er meget populært blandt statistikere, og andre der arbejder med dataanalyse. R indeholder en meget bred vifte af analyse-værktøjer, samt gode mulighed for at lave grafik. R bliver brugt af mere end 2 millioner mennesker og er et af verdens mest populære programmingssprog når det gælder statistiske beregninger. R fra 1993 er implementation af sproget S, som blev defineret tilbage i 1976 hos Bell Labs. R er open-source frigivet under GNU GPL licensen. I 2015 købte Microsoft firmaet Revolution Analytics, som har lavet en specielt server udgave af R, som Microsoft har integeret med SQL Server 2016 og Azure platformen under navnet Microsoft R Server - Læs mere her: https://www.microsoft.com/en-us/sql-server/machinelearningserver Udover selve R findes mere end 15.000 udvidelsespakker, som frit kan hentes fra Comprehensive R Archive Network (CRAN). Bl.a. pakker der kan indlæse data fra konkurrende produkter som SAS og SPSS. R er et dynamisk programmeringssprog, der ikke skal kompileres som mange andre programmeringssprog. "],
["rstudio.html", "3 RStudio 3.1 RStudio Desktop 3.2 RStudio Cloud 3.3 Brugerflade", " 3 RStudio Når R er installeret, kan du bruge det, men for at gøre det nemmere at skrive din R kode brugere vi et Integreret udviklingsmiljø (IDE), der hedder RStudio. Der er to muligheder for at bruge RStudio, enten som en applikation (Desktop) der bliver installeret på din computer eller som en cloud løsning hvor du ikke skal installere noget på din computer. 3.1 RStudio Desktop RStudio Desktop kan installeres på alle operativsystemer; Windows, Mac, Linux. Rstudio Dektop fåes I to forskellige versioner; Open Source Edition og RStudio Dektop Pro. Det er Open Source Edition jeg bruge på dette kursus: https://rstudio.com/products/rstudio/download Selve installation er afhængig af, hvilken computer du har. 3.2 RStudio Cloud Du har også mulighed for at bruge cloud/onlineversionen af RStudio. Det betyder at der ikke er nødvendigt at installere noget for at bruge RSudio. Du skal oprette dig som brugere og tilgår cloud løsningen via dette link: https://rstudio.cloud Cloud løsningen giver dig de sammen muligheder/funktioner som desktop versionen og den sammen brugereflade. Cloud løsningen kom i en beta udgave i starten af 2020 og der bliver stadig udviklet på den. Den er dog meget stabil så den kan uden problemer bruges. 3.3 Brugerflade Når du har installeret både R og RStudio, er du klar til seminaret. Starter du RStudio op, vil det typisk se således ud. Prøv at skrive, i vinduet nederst til venstre: demo(graphics) og følg vejledningen på skærmen. "],
["pakker.html", "4 Pakker 4.1 Pakker du skal bruge 4.2 Installation", " 4 Pakker Pakker er en meget central del af R. En pakker udvide R med lige netop den funktionalitet du har behov for. Der findes over 15.000 pakker - så der er nok også en der kan hjælpe dig Du finder pakkerne på CRAN (The Comprehensive R Archive Network) - https://cran.rstudio.com - det er også her fra du kan installere dem. Det er også muligt at installere en pakke fra en fil; zip eller tar.gz 4.1 Pakker du skal bruge På dette kursus kommer du til at bruge følgende pakker: tidyverse readr readxl tidyr dplyr stringr ggplot2 shiny 4.2 Installation Du kan installere pakker via R kode eller ved at bruge de grafiske muligher i RStudio. Fordelen ved R kode er at du meget nemt kan gøre det sammen igen på f.eks. en anden computer. Ved begge metoder er der to trin du skal igennem: Installation af pakken Aktivering af pakken - i den fil du arbejder med Installation Her bliver pakken hentet og lagt ned på din computer Aktivering Når pakken er installert, skal du aktivere pakken i den fil hvor du vil bruge den Via GUI Du kan nemt installere dine pakker via RStudio. Vælg fanen Packages i det nederste højre vindue Klik på Install Skriv pakkens navn Klik Install Samme sted har du muliged for at opdatere dine pakker og du kan få yderligere information om en pakke hvis du klikker på navnet. Via kode Der er to kommandoer du skal huske den første installere pakken hvis den ikke er på din computer, den anden aktivere pakken fro det script du arbejder i. install.packages(“pakke_navn”) library(pakke_navn) library() # Pakker der er på din computer install.packages(&quot;ggplot2&quot;) # install - ggplot library(dplyr) # load - dplyr update.packages(&quot;tidyverse&quot;) # Update - tidyverse remove.packages(&quot;tidyverse&quot;) # Fjern - tidyverse "],
["workingdirectory.html", "5 Working Directory", " 5 Working Directory R bruger en mappe som Working Directory. Det er nemmere at tilgå filer, der ligger i denne mappe. De filer der er placeret i denne mappe kan du tilgå uden at angive stien til filen. I RStudio har du to muligheder for at ændre dit “Working Directory”: Via kode Via RStudio - GUI - Grafisk Kode Du kan se den aktive mappe med: getwd() Du kan ændre denne mappe med: setwd(“C:\\Users\\tuhe\\Documents\\r_files\\”) getwd() setwd(&quot;~/GitHub/officegeek_excel_til_r&quot;) GUI I den nederste højre del af din skærm skal du gøre følgende: Vælg mappen Files Find den mappe som du vil gøre til Working Directory Klik på knappen More Vælg Set As Working Directory Tip - Når du brugere denne metode kan du se den kode der afvikles i det nederste venstre vindue. "],
["grundlæggende-r.html", "6 Grundlæggende R 6.1 Funktioner 6.2 Logiske operatorer 6.3 Hjælp 6.4 tidyverse - pipe", " 6 Grundlæggende R Du kan vælge at skrive dine R kommandoer enten i det øverste vindue til venstre eller det nederste vindue til venstre. Forskellen er: øverst - kan du gemme dine R kommandoer og de afvikles med CTRL + Enter nederst - bliver kommandoen ikke gemt men afviklet når du trykker Enter Du skal bruge &lt;- nårt du vil tildele en værdi til en variable/objekt x &lt;- 10 navn &lt;- &quot;Tue&quot; Her oprettes to objekter; x og navn og de tildeles en værdi. Du kan se disse objekter i vinduet øverst til højre under Enviroment Du kan “udlæse” værdien af dine objekter ved at skrive navnet på objektet x navn 6.1 Funktioner Som i alle andre programmeringssprog har R en masse funktioner, nogle af dem vil du også kunne genkende fra Excel. Når man udvider R’s funktionalitet via pakker kommer der også nye funktioner til. Her er nogle af de mest almindelige funktioner: length(y) # Antallet af numre i vektoren min(y) # Minimumsværdien max(y) # Maksimumværdien median(y) # Medianen sum(y) # Summen mean(y) # Gennemsnittet var(y) # Variansen sd(y) # Standardafvigelsen Eksempel på en funktion tal &lt;- c(1, 2, 3, 4, 5) sum(tal) mean(tal) 6.2 Logiske operatorer Når du skriver kode får du meget hurtigt brug for noget logik, det kan være du skal finde alle værdier der er større end middelværdien eller… Her er de mest brugte logiske operatorer: x == 2 # &quot;==&quot; betyder &quot;lig med&quot; x != 2 # &quot;!=&quot; betyder &quot;ikke lig med&quot; x &lt; 1 # &quot;&lt;&quot; betyder &quot;mindre end&quot; x &gt; 1 # &quot;&gt;&quot; betyder &quot;større end&quot; x &lt;= 2 # &quot;&lt;=&quot; betyder &quot;mindre eller lig med Hvis de bare bruges som de står her vil de returnere TRUE eller FALSE x &lt;- 2 x == 2 x &gt; 2 6.3 Hjælp R har en rigtig god indbygget hjælpe funktion. Du kan enten få hjælpen frem via kode eller via GUI i RStudie. Uanset om du brugere kode eller GUI, så bliver hjælpen vist i det nederste højre vindue under fanen Help GUI I RStudio kan du søge i det lille felt oppe i den højre hjørne af hjælpe vinduet. Du kan søge efter funktioner eller hele pakker. Kode Kun kan også få hjælpen frem via kode help(&quot;mean&quot;) # Hjælp til en specifik funktion - mean help(&quot;plot&quot;) ?mean ?plot Du kan også få hjælp til en specifik pakke - her base og tidyverse help(package = &quot;base&quot;) help(package = &quot;tidyverse&quot;) 6.4 tidyverse - pipe Tidyverse pakken som kommer i brug senere i dette kursus, gør brug af en lidt speciel måde at skrive R koden på - pipe som er %&gt;% Du kan få den “frem” ved at bruge genvejstasten: Winows - CTRL + SHIFT + M Mac - CMD + SHIFT + M Uden pipe mean(1:10) Med pipe 1:10 %&gt;% mean() Pipe kan beskrives på følgende måde: data %&gt;% gør-noget() %&gt;% gør-noget-andet() %&gt;% gør-det-sidste() northwind_ugedag_salg &lt;- northwind_samlet %&gt;% mutate(Total = Quantity * UnitPrice) %&gt;% mutate(Weekday = weekdays(ShippedDate)) %&gt;% filter(is.na(ShippedDate) == FALSE) %&gt;% select(Weekday, Total) %&gt;% group_by(Weekday) %&gt;% summarise(sum(Total)) "],
["datatyper.html", "7 Datatyper 7.1 Typer af data 7.2 Numbers 7.3 Text (strings) 7.4 Dates and times 7.5 Logicals 7.6 Missing values 7.7 Vectors 7.8 Factors", " 7 Datatyper Alle programmeringssprog arbejder med variabler eller objekter til at gemme data i - R er ingen undtagelse. R er et såkaldt “weakly typed language”, hvilket betyder at datatypen “gættes/antages”, fremfor at blive erklæret. Det kan gøre det nemmere at komme i gang med R, da du ikke skal tage hensyn til typen af din variabel, det gør R for dig. Det er dog muligt at ændre datatypen af en variabel, hvis det R har valgt ikke passer med det du ønsker. Nogle sprog, f.eks. C, er “strongly typed language”, på disse sprog skal datatypen udtrykkeligt angives, før den bruges. Dette har også sine fordele, såsom at vide, at datatypen ikke kan ændres ved et uheld. 7.1 Typer af data Her er en liste over de 6 mest almindelige datatyper i R. Datatype Eksempel Numbers 1 1.25 -34 Text (strings) “abc” Categories (factors) months(“Jan”, “Feb”, “Mar”) Dates and times 2020-02-05 Logicals TRUE / FALSE Missing values NA eller NaN 7.2 Numbers Numbers eller tal er nok den mest bruge datatype. Integer er heltal, altså tal der ikke har nogle decimaler Rael numbers bliver også kaldt numerics eller doubles, tal der kan indeholde decimaler x &lt;- 100 y &lt;- 25,75 class(x) # Retunere typen 7.3 Text (strings) Næst efter numbers kommer nok Text som den mest brugte datatype. Escape karakter - Kan bruges i dine Text stings ' - Enkelt anførselstegn \" - Doblet anførselstegn - Ny linje \\ - Backslash navn &lt;- &quot;Tue&quot; class(navn) # Retunere typen 7.4 Dates and times Når du arbejder med data, kommer du også hurtigt til at arbejde med datoer eller tidsangivelser. Dan kan nogle gang godt give lidt problemer, f.eks. når en dato er gemt på den danske måde at skrive en dato på. Her kommer R funktionen as.Date sammen med format dig til undsætning. Kode Betydning Område %Y Year 1–9999 %m Month 01–12 %d Day 01–31 %H Hour 00–23 %M Minute 00–59 %S Second 00–59 %a Weekday - kort %A Weekday - Lang %b Month - Kort %B Month - Lang Sys.time() format(Sys.time(), &quot;%Y&quot;) format(Sys.time(), &quot;%m&quot;) format(Sys.time(), &quot;%d&quot;) format(Sys.time(), &quot;%H&quot;) format(Sys.time(), &quot;%M&quot;) format(Sys.time(), &quot;%S&quot;) dagsdato &lt;- Sys.time() dagsdato &lt;- format(Sys.time(), &quot;%d-%m-%y&quot;) dagsdato &lt;- format(Sys.time(), &quot;%a&quot;) dagsdato &lt;- format(Sys.time(), &quot;%A&quot;) dagsdato &lt;- format(Sys.time(), &quot;%b&quot;) dagsdato &lt;- format(Sys.time(), &quot;%B&quot;) dagsdato mindato_1 &lt;- as.Date(&quot;2019-12-24&quot;) mindato_2 &lt;- as.Date(&quot;22-JAN-2020&quot;, &quot;%d-%b-%y&quot;) mindato_3 &lt;- as.Date(&quot;24-12-2019&quot;, &quot;%d-%m-%y&quot;) 7.5 Logicals Værdierne SAND og FALSE kan være ekstremt nyttige, der er mange funktioner der returnere TRUE eller FALSE. Du vil også kunne se Logicals omtalt som boolean x &lt;- 10 y &lt;- &quot;Hej med dig&quot; is.numeric(x) # Retunere TRUE is.numeric(y) # Retunere FALSE Husk at TRUE og FALSE er reserverede ord i R 7.6 Missing values Du sikkert komme ud for at der “huller” i dine data - Værdier der burde have været der, men af en eller anden grund ikke er tilstede. Fra databaser kender du måske udtrykket “NULL”. R håndtere normal disse værdier som NA (Not Available). Som standard er NA en logisk type typeof(x &lt;- NA) salgstal &lt;-c(120, NA, 110, 140, NA) mean(salgstal) mean(salgstal, na.rm = TRUE) Selvom en værdi ikke er til stede (NA), holder R styr på hviklen datatype værdien skulle have været. 7.7 Vectors Vectors er det mest bruget object i R. Der er seks typer af vectors: logical integer double complex character raw Oprettelse af vektor Selv når du kun skriver en enkelt værdi i R, bliver det til en vector, med længden 1. my_character &lt;- &quot;abc&quot; # character my_double &lt;- 12.5 # double my_integer &lt;- 27 # integer my_logical &lt;- TRUE # logical my_complex &lt;- 2+3i # complex my_raw &lt;- charToRaw(&#39;hello&#39;) # raw Funktionen c() kan du bruge til at oprette en “samling” af Vectors af sammen type. mk &lt;- c(&quot;M&quot;, &quot;K&quot;, &quot;K&quot;, &quot;M&quot;, &quot;M&quot;) svar &lt;- c(1, &quot;ja&quot;, 1, &quot;Nej&quot;, 2) # chr vector value &lt;- c(12, 45, 23, 45, 78) # num vector saelger &lt;- c(&quot;Ole&quot;, &quot;Pia&quot;, &quot;Kim&quot;, &quot;Ole&quot;, &quot;Pia&quot;, &quot;Pia&quot;, &quot;Kim&quot;) salg &lt;- c(124, 345, 763, 456, 673, 349, 298) dato &lt;- as.Date(c(&quot;2020-04-02&quot;, &quot;2020-04-02&quot;, &quot;2020-04-03&quot;, &quot;2020-04-03&quot;, &quot;2020-04-04&quot;, &quot;2020-04-05&quot;, &quot;2020-04-05&quot;)) 7.8 Factors Factors er dataobjekter, der bruges til at kategorisere dataene og gemme dem som niveaue Factors kan indeholde både character og integer. De er nyttige i kolonner, der har et begrænset antal unikke værdier. Som f.eks. Mand, Kvinde eller Sand, Falsk osv. De er nyttige i dataanalyse til statistisk modellering. Faktorer oprettes ved hjælp af funktionen factor() ved at tage en vector som input. mk &lt;- c(&quot;M&quot;, &quot;K&quot;, &quot;K&quot;, &quot;M&quot;, &quot;M&quot;) mk_factor &lt;- factor(mk) levels(mk_factor) &lt;- c(&quot;Mand&quot;, &quot;Kvinde&quot;) class(mk) class(mk_factor) nlevels(mk_factor) "],
["import.html", "8 Import 8.1 Northwind 8.2 readr", " 8 Import De data du vil arbejde med i R skal importeres. Når du importere overføre du data til en variabel i Excel. R har en dataframe som hedder en tribble som er en nyere version af den orginale R dataframe 8.1 Northwind Jeg bruger data fra et fiktivt Microsoft firma - Northwind - de sammen data er tilgængelige via CSV og Excel. CSV orders.csv order_details.csv customers.csv products.csv employess.csv categories.csv supliers.csv Excel northwind.xlsx categories customers employess order_details orders products supliers 8.2 readr Jeg får meget tit data i Excel filer hvor det er vigtigt med en import funktion der løser opgaven nemt, fleksibet og hurtigt. read_excel er efter min mening den bedste funktion til import fra Excel filer, den har den fleksibiliatet og funktionalitet jeg har behov for. Den har også den fordel at den indlæser data i formatet tibble, hvilket gør det nemmere og hurtigere at arbejde med. read_excel, filder selv ud af om det er en .xls eller en ,xlsx Excel fil du vil importere. Hvis du kender formatet på din Excel fil, kan du med fordel bruge: read_xls read_xlsx library(readxl) salg &lt;- read_xlsx(&quot;webinar_data.xlsx&quot;) # Indlæser første ark salg &lt;- read_xlsx(&quot;webinar_data.xlsx&quot;, sheet = &quot;salgs_data&quot;) # Indlæser arket &quot;salgs_data&quot; salg &lt;- read_xlsx(&quot;webinar_data.xlsx&quot;, sheet = 3) # Indlæser ark 3 read_excel har følgende parametere: read_excel(path, sheet = NULL, range = NULL, col_names = TRUE, col_types = NULL, na = &quot;&quot;, trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, n_max), progress = readxl_progress(), .name_repair = &quot;unique&quot;) path sheet range col_names col_types na trim_ws skip n_max guess_max progress name_repair "],
["omdanne.html", "9 “Omdanne” 9.1 dplyr 9.2 join", " 9 “Omdanne” Du vil have brug for at ændre de data som du arbejder med. Det kan være at der skal tilføjes nye koloner eller der er koloner der ikke skal bruges til noget. 9.1 dplyr dplyr er en grammar of data manipulation Du kan læse mere om dplyr pakken her: dplyr.tidyverse.org/index.html dplyr hjælper dig med at løse de mest almindelige udfordringer ved datamanipulation: mutate() - tilføjer nye felter/koloner select() - vælger koloner filter() - vælger rækker baseret på filterværdien summarise() - gruppere værdier arrange() - ændrer rækkefølgen af rækkerne 9.1.1 Eksempler library(readxl) northwind &lt;- read_excel(&quot;northwind.xlsx&quot;) 9.2 join Ofte, når du arbejder med forskellige datasæt, de kan være eksporteret fra en database eller “selvstændige” CSV filer. I en database er det muligt at sammenføje disse data på en fælles nøgle eller kolonne. I Excel kan du bruge Lookup funktioner som hlookup til dette. Denne form for sammenføjning/sammenlægning af data kaldes at joine data. Det er meget brugt i en database og dplyr understøtter det også. Du har adgang til følgende join muligheder: Inner Join (inner_join) Left Join (left_join) Right Join (right_join) Full Join (full_join) Semi Join (semi_join) Anti Join (anti_join) Syntaksen for at fortage et join mellem to tabeller er: join_type(firstTable, secondTable, by=columnTojoinOn) Den mest bruge join type er left_join, så det er den jeg vil bruge her. Hvis du er interessert i de andre typer, kan du læse om dem her: dplyr.tidyverse.org/reference/join.html, www.sql-join.com 9.2.1 Eksempel - left_join Med udgangspunkt i Northwind er her 2 eksampler: "],
["visualiser.html", "10 Visualiser", " 10 Visualiser ggplot2 er en R-pakke fra tidyverse. Dens popularitet ligger i enkelheden ved at tilpasse grafer og fjerne eller ændre komponenter i et plot på et højt abstraktionsniveau. Tjek denne bog, hvis du er interesseret i at lære mere - Datavisualisering i R Med ggplot2 Syntaks for plottning i ggplot2 følger en enkel metode til opbygning af grafer. Data Variabler Plot type - det er her du definerer plottypen Ekstra lag til tilpasning - titel, etiketter, akser osv. En typisk struktur; ggplot(data = Example_Data) + aes(x = Variable_1, y = Variable_2) + geom_bar() #this is an example of a bar plot sysntax Plot ggplot2 - Is salg ggplot(data=issalg) + geom_point(mapping = aes(x=Temperatur, y=Salg, color=Butik_Placering, size=Salg)) + geom_smooth(mapping = aes(x=Temperatur, y=Salg, color=Butik_Placering), se=FALSE) + geom_hline(yintercept = mean(issalg$Salg)) + annotate(&quot;text&quot;, label=&quot;Middel Salg&quot;, x=15, vjust = 0, y=mean(issalg$Salg+200)) + geom_vline(xintercept = mean(issalg$Temperatur)) + annotate(&quot;text&quot;, label=&quot;Middel Temperatur&quot;, y=100, hjust = 0, x=mean(issalg$Temperatur-0.5), angle = 90) + theme(panel.background = element_blank()) + theme(plot.background = element_blank()) + scale_x_continuous(name=&quot;Temperatur&quot;) + scale_y_continuous(name=&quot;Total Salg&quot;) + scale_color_discrete(name=&quot;Placering af butiken&quot;) + scale_size_continuous(name=&quot;Salg&quot;) + theme_classic() Plot ggplot2 - Salg - Group By # Group by Category + ggplot salg %&gt;% group_by(CategoryName) %&gt;% summarise(totalsale=sum(Sale)) %&gt;% ggplot() + geom_col(mapping = aes(x=CategoryName, y=totalsale)) + xlab(&quot;Categoryname&quot;) + ylab(&quot;Sale&quot;) + ggtitle(&quot;Sales by category&quot;, subtitle = &quot;2016 to 2018&quot;) "],
["kommuniker.html", "11 Kommuniker 11.1 ShinyApps.io 11.2 Opret forbindelse 11.3 Standard eksempler 11.4 Struktur", " 11 Kommuniker Med pakken shiny er det muligt for dig at opbygge og dele interaktive web applikationer direkte fra R. Du dele dine web applikationer via ShinyApps.io 11.1 ShinyApps.io Hvis du skal dele det med mange andre, er der muligt at bruge en cloud løsning – ShinyApps.io Hvis du vil bruge ShinyApps.io skal følgende være på plads: • Du skal også bruge pakken rsconnect • Du skal oprette din på ShinyApps.io som brugere • Du skal bruge en token fra din konto i din App ShinyApps.io har flere forskellige løsninger startende ved en gratis til en løsning der koster 299 USD pr. måned. Den gratis løsning indeholder følgende: • 5 Applikationer • 25 Aktive Hosts • Support via deres www side • Logo fra RStudio i din applikation 11.2 Opret forbindelse For at publicere din applikation på ShinyApps.io skal du gøre følgende: Opret og test din løsning lokalt Klik på knappen Publish to Server Vælg ShinyApps.io Du skal kopiere din Token fra ShinyApps.io ind i dette vindow Du skal gå ind på konto på ShinyApps.io og vælge: Account – Tokens – Kopier din token – Husk klik på knappen Show secret før du kopierer ShinyApps.io har en rigtig god dokumentation som du kan finde her: https://docs.rstudio.com/shinyapps.io/index.html 11.3 Standard eksempler Shiny har 11 eksempeler der på en god måde viser de muligheder du har med Shiny. Du kan afvikle dem på denne måde: # Demo løsninger install.packages(&quot;shiny&quot;) library(shiny) runExample(&quot;01_hello&quot;) runExample(&quot;02_text&quot;) runExample(&quot;03_reactivity&quot;) runExample(&quot;04_mpg&quot;) runExample(&quot;05_sliders&quot;) runExample(&quot;06_tabsets&quot;) runExample(&quot;07_widgets&quot;) runExample(&quot;08_html&quot;) runExample(&quot;09_upload&quot;) runExample(&quot;10_download&quot;) runExample(&quot;11_timer&quot;) Det gode ved disse eksempler er at kode bliver vist sammen med eksemplet, hvilket gør det nemt selv at prøve løsningen. 11.4 Struktur En Shimy App er ”samlet” i et enkelt script app.R som du kan afvikle. app.R består af tre dele: Userinterface (ui.R) Her styrer du layout af din applikation Server (server.R) Her definere du det der skal til for at opbygge din løsning Kald til shinyApp function Her bygges selev løsningen Du kan oprette en ny shiny App under: File – New File – Shiny Web App I dette vindue skal du indtaste navnet på din App og placeringen. Du har også mulighed for at vælge mellem og din App skal opdeles i to file, ui.R og server.R, eller om du vil have alt i en fil. Opdelingen i to filer giver dig de fleste muligheder og en bedre kontrol. Du får to filer der indeholder en demo løsning som du kan bruge som udgangspunkt for din løsning. "]
]
